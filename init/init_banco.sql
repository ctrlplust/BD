-- =====================================================
--   SCRIPT DE INICIALIZACIÓN: init_camiones.sql
--   Base de datos: camiones
--   Autor: Tomás Núñez Yañéz
--   Fecha: Octubre 2025
--   Nota mía: este script crea el esquema base con datos
--             mínimos para poder probar toda la lógica.
-- =====================================================

BEGIN;

-- ===========================================
-- 1) Tablas base (sin dependencias directas)
--    Nota: parto por las entidades raíz que no
--    referencian a otras (evita problemas de FK).
-- ===========================================

CREATE TABLE IF NOT EXISTS region (
    id_region       INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre          VARCHAR(255) NOT NULL,
    pais            VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS GerenteSucursal (
    id_gerente      INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre          VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS TipoEjecutivo (
    id_tipo         INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre_tipo     VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS ProductoCategoria (
    id_categoria        INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre_categoria    VARCHAR(255) NOT NULL
);

-- ===========================================
-- 2) Sucursal (depende de Región y Gerente)
--    Nota: gerente único por sucursal (UNIQUE).
-- ===========================================

CREATE TABLE IF NOT EXISTS Sucursal (
    id_sucursal     INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre          VARCHAR(255) NOT NULL,
    direccion       VARCHAR(255) NOT NULL,
    id_region       INT NOT NULL,
    id_gerente      INT NOT NULL UNIQUE,
    CONSTRAINT fk_sucursal_region
        FOREIGN KEY (id_region) REFERENCES Region(id_region)
            ON UPDATE CASCADE ON DELETE RESTRICT,
    CONSTRAINT fk_sucursal_gerente
        FOREIGN KEY (id_gerente) REFERENCES GerenteSucursal(id_gerente)
            ON UPDATE CASCADE ON DELETE RESTRICT
);

-- ===========================================
-- 3) Producto (depende de ProductoCategoria)
-- ===========================================

CREATE TABLE IF NOT EXISTS Producto (
    id_producto     INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre_producto VARCHAR(255) NOT NULL,
    id_categoria    INT NOT NULL,
    CONSTRAINT fk_producto_categoria
        FOREIGN KEY (id_categoria) REFERENCES ProductoCategoria(id_categoria)
            ON UPDATE CASCADE ON DELETE RESTRICT
);

-- ===========================================
-- 4) Ejecutivo (depende de TipoEjecutivo y Sucursal)
--    Nota: RUT único para no duplicar personas.
-- ===========================================

CREATE TABLE IF NOT EXISTS Ejecutivo (
    id_ejecutivo    INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre          VARCHAR(255) NOT NULL,
    rut             VARCHAR(20)  NOT NULL UNIQUE,
    id_tipo         INT NOT NULL,
    id_sucursal     INT NOT NULL,
    CONSTRAINT fk_ejecutivo_tipo
        FOREIGN KEY (id_tipo) REFERENCES TipoEjecutivo(id_tipo)
            ON UPDATE CASCADE ON DELETE RESTRICT,
    CONSTRAINT fk_ejecutivo_sucursal
        FOREIGN KEY (id_sucursal) REFERENCES Sucursal(id_sucursal)
            ON UPDATE CASCADE ON DELETE RESTRICT
);

-- ===========================================
-- 5) Cliente (depende opcionalmente de Ejecutivo)
--    Nota: si cambia el ejecutivo, dejo SET NULL
--          para mantener ventas históricas.
-- ===========================================

CREATE TABLE IF NOT EXISTS Cliente (
    id_cliente      INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre          VARCHAR(255) NOT NULL,
    rut             VARCHAR(20)  NOT NULL UNIQUE,
    id_ejecutivo    INT NULL,
    CONSTRAINT fk_cliente_ejecutivo
        FOREIGN KEY (id_ejecutivo) REFERENCES Ejecutivo(id_ejecutivo)
            ON UPDATE CASCADE ON DELETE SET NULL
);

-- ===========================================
-- 6) Venta (depende de Cliente, Producto y Ejecutivo)
--    Nota: monto no puede ser negativo (CHECK).
-- ===========================================

CREATE TABLE IF NOT EXISTS Venta (
    id_venta        INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    fecha           DATE NOT NULL,
    monto           NUMERIC(12,2) NOT NULL CHECK (monto >= 0),
    id_cliente      INT NOT NULL,
    id_producto     INT NOT NULL,
    id_ejecutivo    INT NOT NULL,
    CONSTRAINT fk_venta_cliente
        FOREIGN KEY (id_cliente) REFERENCES Cliente(id_cliente)
            ON UPDATE CASCADE ON DELETE RESTRICT,
    CONSTRAINT fk_venta_producto
        FOREIGN KEY (id_producto) REFERENCES Producto(id_producto)
            ON UPDATE CASCADE ON DELETE RESTRICT,
    CONSTRAINT fk_venta_ejecutivo
        FOREIGN KEY (id_ejecutivo) REFERENCES Ejecutivo(id_ejecutivo)
            ON UPDATE CASCADE ON DELETE RESTRICT
);

-- ===========================================
-- 7) Meta (depende de Ejecutivo y ProductoCategoria)
--    Nota: rango válido y peso [%] 0..100.
-- ===========================================

CREATE TABLE IF NOT EXISTS Meta (
    id_meta         INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    periodo_inicio  DATE NOT NULL,
    periodo_fin     DATE NOT NULL,
    cantidad_meta   INT  NOT NULL CHECK (cantidad_meta >= 0),
    monto_meta      NUMERIC(12,2) NOT NULL CHECK (monto_meta >= 0),
    peso_ponderado  NUMERIC(5,2)  NOT NULL CHECK (peso_ponderado >= 0 AND peso_ponderado <= 100),
    id_ejecutivo    INT NOT NULL,
    id_categoria    INT NOT NULL,
    CONSTRAINT fk_meta_ejecutivo
        FOREIGN KEY (id_ejecutivo) REFERENCES Ejecutivo(id_ejecutivo)
            ON UPDATE CASCADE ON DELETE RESTRICT,
    CONSTRAINT fk_meta_categoria
        FOREIGN KEY (id_categoria) REFERENCES ProductoCategoria(id_categoria)
            ON UPDATE CASCADE ON DELETE RESTRICT,
    CONSTRAINT chk_meta_rango_fechas CHECK (periodo_fin > periodo_inicio)
);

-- ===========================================
-- 8) Índices para rendimiento y unicidad
--    Nota: creo índices en FK y una combinación
--          única de periodo para evitar duplicados exactos.
-- ===========================================

CREATE INDEX IF NOT EXISTS idx_sucursal_id_region      ON Sucursal(id_region);
CREATE INDEX IF NOT EXISTS idx_sucursal_id_gerente     ON Sucursal(id_gerente);
CREATE INDEX IF NOT EXISTS idx_producto_id_categoria   ON Producto(id_categoria);
CREATE INDEX IF NOT EXISTS idx_ejecutivo_id_tipo       ON Ejecutivo(id_tipo);
CREATE INDEX IF NOT EXISTS idx_ejecutivo_id_sucursal   ON Ejecutivo(id_sucursal);
CREATE INDEX IF NOT EXISTS idx_cliente_id_ejecutivo    ON Cliente(id_ejecutivo);
CREATE INDEX IF NOT EXISTS idx_venta_id_cliente        ON Venta(id_cliente);
CREATE INDEX IF NOT EXISTS idx_venta_id_producto       ON Venta(id_producto);
CREATE INDEX IF NOT EXISTS idx_venta_id_ejecutivo      ON Venta(id_ejecutivo);
CREATE INDEX IF NOT EXISTS idx_meta_id_ejecutivo       ON Meta(id_ejecutivo);
CREATE INDEX IF NOT EXISTS idx_meta_id_categoria       ON Meta(id_categoria);

CREATE UNIQUE INDEX IF NOT EXISTS uq_meta_ejecutivo_categoria_periodo
    ON Meta(id_ejecutivo, id_categoria, periodo_inicio, periodo_fin);

-- ===========================================
-- 9) Datos iniciales mínimos (para pruebas locales)
--    Nota: con esto puedo probar ventas y metas al tiro.
-- ===========================================

INSERT INTO Region (nombre, pais) VALUES ('RM', 'Chile');
INSERT INTO GerenteSucursal (nombre) VALUES ('Gerente 1');
INSERT INTO TipoEjecutivo (nombre_tipo) VALUES ('Retail'), ('Pyme'), ('VIP');
INSERT INTO ProductoCategoria (nombre_categoria) VALUES ('Tarjetas'), ('Créditos'), ('Cuentas');

INSERT INTO Sucursal (nombre, direccion, id_region, id_gerente)
VALUES ('Sucursal Centro', 'Av. Principal 123', 1, 1);

INSERT INTO Ejecutivo (nombre, rut, id_tipo, id_sucursal)
VALUES ('Ana Pérez', '12.345.678-9', 1, 1);

INSERT INTO Cliente (nombre, rut, id_ejecutivo)
VALUES ('Cliente Demo', '9.876.543-2', 1);

INSERT INTO Producto (nombre_producto, id_categoria)
VALUES ('Tarjeta Visa', 1), ('Crédito Consumo', 2);

INSERT INTO Venta (fecha, monto, id_cliente, id_producto, id_ejecutivo)
VALUES (CURRENT_DATE, 150000, 1, 1, 1);

INSERT INTO Meta (periodo_inicio, periodo_fin, cantidad_meta, monto_meta, peso_ponderado, id_ejecutivo, id_categoria)
VALUES ('2025-10-01', '2025-10-31', 10, 1000000, 60.00, 1, 1);

COMMIT;
